name: Build and Test Django

on:
  push:
    branches:
      - entrega
      - renamingproject
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ALLOWED_HOSTS: "*"
      USE_SQLITE: "True"
      DB_ENGINE_LOCAL: "django.db.backends.sqlite3"
      DB_HOST_LOCAL: ""
      DB_NAME_LOCAL: "sqlite3.db"
      DB_USER_LOCAL: ""
      DB_PASSWORD_LOCAL: ""
      DB_PORT_LOCAL: ""
      DB_ENGINE_TEST: "django.db.backends.sqlite3"
      DB_HOST_TEST: ""
      DB_NAME_TEST: "sqlite3.db"
      DB_PASSWORD_TEST: ""
      DB_PORT_TEST: ""
      DB_USER_TEST: ""
      DB_ENGINE_PRODUCTION: "django.db.backends.postgres"
      DB_HOST_PRODUCTION: ""
      DB_NAME_PRODUCTION: ""
      DB_PASSWORD_PRODUCTION: ""
      DB_PORT_PRODUCTION: ""
      DB_USER_PRODUCTION: ""
      DEBUG: "True" 
      DEFAULT_FROM_EMAIL: "xxxxxxx@xxxx.com"
      HASHIDS_SALT: "hA8(scA@!fg3*sc&xaGh&6%-l<._&xCf,"
      DJANGO_SETTINGS_MODULE: "vepemamoduloum.settings.local"
      URL_VALIDATION: ""
      URL: ""
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      EMAIL_HOST: ""
      EMAIL_HOST_PASSWORD: ""
      EMAIL_HOST_USER: ""
      EMAIL_PORT: 587
      EMAIL_USE_TLS: "True"
      TEST_URL: http://localhost:8000  
      DJANGO_SECRET_KEY: "django-insecure-&we(0t(&@t(90rx$19tr3dms-3_4ngz6*6d=9=5ghz=ov#%^4^"

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          pwd
          cd main
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-json-report pytest-metadata pytest-django pytest-cov
      - name: Migrate Database
        run: |
          pwd
          cd main
          python manage.py migrate --noinput
      - name: Run Server , Tests and upload report
        run: |
          pwd
          cd main
          
          python manage.py makemigrations
          python manage.py check
          #python manage.py migrate --noinput && gunicorn vepemamoduloum.wsgi:application --bind 0.0.0.0:8000  --error-logfile - &
          pytest --cov=. --cov-report xml:coverage.xml --junitxml=junit-report.xml 
          cd ..
          
          
          #python manage.py test 
          #cd apps
          #cd socialentity
          #cd test
          #cd unit
          #pip install pytest pytest-json-report pytest-metadata pytest-django
          #pytest entities_crud_test.py 
          #pytest relatorio_acompanhar_prestadores_test.py 
          #pytest cadastro_and_login_test.py
          
          #cd ../../../ 
          #cd encaminhamento/test/unit 
          ##pytest entities_crud_test.py 
          #cd ../../../ 
          #cd atendimento/test/unit 
          #pytest entities_crud_test.py -s
          
          
          #cd ../../../ 
          #cd alocacao/test/unit 
          #pytest entities_crud_test.py -s
      #python manage.py test --coverage --cov-report xml:../coverage.xml --pdb -vv
      - uses: actions/upload-artifact@v4  # Upload reports as artifacts
        with:
          name: test-reports
          path: main

      - uses: actions/download-artifact@v4  # <--- CRUCIAL STEP! Download before using.
        with:
          name: test-reports       # Matches the upload name
          path: test-reports       # Where to download. This creates the 'test-reports'


      - run: ls -la test-reports # <--- Verify downloaded artifact contents




      # Etapa para limpar a pasta temporária
      - name: Clean Temp Folder
        run: |
          echo "Cleaning temp folder..."
          sudo rm -rf /tmp/*
          echo "Temp folder cleaned."
          
      - name: Check Directory Permissions
        run: |
          ls -ld main
          ls -l main
      - name: Set Directory Permissions
        run: |
          sudo chmod -R u+rwx main
    


      #- name: Run SonarQube Scan with Debugging
      #  run: |
      #    echo "SONAR_SCANNER_OPTS=-X" >> $GITHUB_ENV
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      #- name: SonarQube Cloud Scan
      #  uses: SonarSource/sonarcloud-github-action@master
         #uses: SonarSource/sonarqube-scan-action@v4.1.0
      #  with:  # Add a "with" block for inputs
      #    projectBaseDir: main
      #  env:
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: Get Test Report Files
        id: get-test-reports
        run: |
          pwd
          #cd main
          ls
          
          
      


      - name: SonarQube Report Import
        uses: SonarSource/sonarqube-scan-action@v4.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:   
          args: >
            -Dsonar.projectKey=Kenko2002_projeto_engsoft_gempa
            -Dsonar.organization=kenko2002
            -Dsonar.projectName=projeto_engsoft_gempa
            -Dsonar.projectVersion=1.0
            -Dsonar.tests=main/apps/alocacao/tests,main/apps/encaminhamento/tests,main/apps/atendimento/tests,main/apps/socialentity/tests
            
            #-Dsonar.python.coverage.reportPaths=test-report/coverage.xml
            #-Dsonar.testExecutionReportPaths=test-report/junit-report.xml
      


#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Build and push Docker image
#        env:
#          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }} # Apenas segredos aqui
#          # ... outros segredos
#        run: |
#          docker buildx build \
#            --platform linux/amd64 \
#            --build-arg ALLOWED_HOSTS="${{ github.event.inputs.ALLOWED_HOSTS || '*' }}" \
#            --build-arg USE_SQLITE="${{ github.event.inputs.USE_SQLITE || 'True' }}" \
#            --build-arg DB_ENGINE_LOCAL="${{ github.event.inputs.DB_ENGINE_LOCAL || 'django.db.backends.sqlite3' }}" \
#            --build-arg DB_HOST_LOCAL="${{ github.event.inputs.DB_HOST_LOCAL || '' }}" \
#            --build-arg DB_NAME_LOCAL="${{ github.event.inputs.DB_NAME_LOCAL || 'sqlite3.db' }}" \
#            --build-arg DB_USER_LOCAL="${{ github.event.inputs.DB_USER_LOCAL || '' }}" \
#            --build-arg DB_PASSWORD_LOCAL="${{ github.event.inputs.DB_PASSWORD_LOCAL || '' }}" \
#            --build-arg DB_PORT_LOCAL="${{ github.event.inputs.DB_PORT_LOCAL || '' }}" \
#            --build-arg DB_ENGINE_TEST="${{ github.event.inputs.DB_ENGINE_TEST || 'django.db.backends.sqlite3'}}" \
#            --build-arg DB_HOST_TEST="${{ github.event.inputs.DB_HOST_TEST || '' }}" \
#            --build-arg DB_NAME_TEST="${{ github.event.inputs.DB_NAME_TEST || 'sqlite3.db' }}" \
#            --build-arg DB_PASSWORD_TEST="${{ github.event.inputs.DB_PASSWORD_TEST || '' }}" \
#            --build-arg DB_PORT_TEST="${{ github.event.inputs.DB_PORT_TEST || '' }}" \
#            --build-arg DB_USER_TEST="${{ github.event.inputs.DB_USER_TEST || '' }}" \
#            --build-arg DB_ENGINE_PRODUCTION="${{ github.event.inputs.DB_ENGINE_PRODUCTION || 'django.db.backends.postgres' }}" \
#            --build-arg DB_HOST_PRODUCTION="${{ github.event.inputs.DB_HOST_PRODUCTION || '' }}" \
#            --build-arg DB_NAME_PRODUCTION="${{ github.event.inputs.DB_NAME_PRODUCTION || '' }}" \
#            --build-arg DB_PASSWORD_PRODUCTION="${{ github.event.inputs.DB_PASSWORD_PRODUCTION || '' }}" \
#            --build-arg DB_PORT_PRODUCTION="${{ github.event.inputs.DB_PORT_PRODUCTION || '' }}" \
#            --build-arg DB_USER_PRODUCTION="${{ github.event.inputs.DB_USER_PRODUCTION || '' }}" \
#            --build-arg DEBUG="${{ github.event.inputs.DEBUG || 'True' }}" \
#            --build-arg DEFAULT_FROM_EMAIL="${{ github.event.inputs.DEFAULT_FROM_EMAIL || 'no-reply@example.com' }}" \
#            --build-arg HASHIDS_SALT="${{ github.event.inputs.HASHIDS_SALT || 'some_random_secret_salt' }}" \ 
#            --build-arg DJANGO_SETTINGS_MODULE="${{ github.event.inputs.DJANGO_SETTINGS_MODULE || 'vepemamoduloum.settings.local' }}" \
#            --build-arg URL_VALIDATION="${{ github.event.inputs.URL_VALIDATION || '' }}" \
#            --build-arg URL="${{ github.event.inputs.URL || '' }}" \
#            --build-arg POSTGRES_USER="${{ github.event.inputs.POSTGRES_USER || 'postgres' }}" \
#            --build-arg POSTGRES_PASSWORD="${{ github.event.inputs.POSTGRES_PASSWORD || 'postgres' }}" \
#            --build-arg EMAIL_HOST="${{ github.event.inputs.EMAIL_HOST || 'smtp.example.com' }}" \
#            --build-arg EMAIL_HOST_PASSWORD=${{github.event.inputs.EMAIL_HOST_PASSWORD || ''}} \
#            --build-arg EMAIL_HOST_USER="${{ github.event.inputs.EMAIL_HOST_USER || '' }}" \
#            --build-arg EMAIL_PORT="${{ github.event.inputs.EMAIL_PORT || 587 }}" \
#            --build-arg EMAIL_USE_TLS="${{ github.event.inputs.EMAIL_USE_TLS || 'True' }}" \
#            --build-arg TEST_URL="${{ github.event.inputs.TEST_URL || 'http://localhost:8000' }}" \
#            --build-arg DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY} \
#            -t renzofraga/nome-da-imagem:tag \
#            --push .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2



      - name: Print Variables (for debugging)
        run: |
          echo "GITHUB_ACTOR: ${{ github.actor }}"
          # Não imprima o token em produção!  Use apenas para depuração.
          echo "DOCKER_HUB_TOKEN (DEBUG ONLY): ${{ secrets.DOCKER_HUB_TOKEN }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: "renzofraga"
          password: "dckr_pat_HUX3hupB2TLGSYkukaFOZFNXgsg"


  
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: /home/runner/work/projeto_engsoft_gempa/projeto_engsoft_gempa/main/
          file: ./main/Dockerfile # Certifique-se de que o path está correto
          platforms: linux/amd64
          push: true
          tags: renzofraga/nome-da-imagem:tag
          build-args: |
            - ALLOWED_HOSTS=${{ github.event.inputs.ALLOWED_HOSTS || '*' }}
            - USE_SQLITE=${{ github.event.inputs.USE_SQLITE || 'True' }}
            - DB_ENGINE_LOCAL=${{ github.event.inputs.DB_ENGINE_LOCAL || 'django.db.backends.sqlite3' }}
            - DB_HOST_LOCAL=${{ github.event.inputs.DB_HOST_LOCAL || '' }}
            - DB_NAME_LOCAL=${{ github.event.inputs.DB_NAME_LOCAL || 'sqlite3.db' }}
            - DB_USER_LOCAL=${{ github.event.inputs.DB_USER_LOCAL || '' }}
            - DB_PASSWORD_LOCAL=${{ github.event.inputs.DB_PASSWORD_LOCAL || '' }}
            - DB_PORT_LOCAL=${{ github.event.inputs.DB_PORT_LOCAL || '' }}
            - DB_ENGINE_TEST=${{ github.event.inputs.DB_ENGINE_TEST || 'django.db.backends.sqlite3'}}
            - DB_HOST_TEST=${{ github.event.inputs.DB_HOST_TEST || '' }}
            - DB_NAME_TEST=${{ github.event.inputs.DB_NAME_TEST || 'sqlite3.db' }}
            - DB_PASSWORD_TEST=${{ github.event.inputs.DB_PASSWORD_TEST || '' }}
            - DB_PORT_TEST=${{ github.event.inputs.DB_PORT_TEST || '' }}
            - DB_USER_TEST=${{ github.event.inputs.DB_USER_TEST || '' }}
            - DB_ENGINE_PRODUCTION=${{ github.event.inputs.DB_ENGINE_PRODUCTION || 'django.db.backends.postgres' }}
            - DB_HOST_PRODUCTION=${{ github.event.inputs.DB_HOST_PRODUCTION || '' }}
            - DB_NAME_PRODUCTION=${{ github.event.inputs.DB_NAME_PRODUCTION || '' }}
            - DB_PASSWORD_PRODUCTION=${{ github.event.inputs.DB_PASSWORD_PRODUCTION || '' }}
            - DB_PORT_PRODUCTION=${{ github.event.inputs.DB_PORT_PRODUCTION || '' }}
            - DB_USER_PRODUCTION=${{ github.event.inputs.DB_USER_PRODUCTION || '' }}
            - DEBUG=${{ github.event.inputs.DEBUG || 'True' }}
            - DEFAULT_FROM_EMAIL=${{ github.event.inputs.DEFAULT_FROM_EMAIL || 'no-reply@example.com' }}
            - HASHIDS_SALT=${{ github.event.inputs.HASHIDS_SALT || 'some_random_secret_salt' }}
            - DJANGO_SETTINGS_MODULE=${{ github.event.inputs.DJANGO_SETTINGS_MODULE || 'vepemamoduloum.settings.local' }}
            - URL_VALIDATION=${{ github.event.inputs.URL_VALIDATION || '' }}
            - URL=${{ github.event.inputs.URL || '' }}
            - POSTGRES_USER=${{ github.event.inputs.POSTGRES_USER || 'postgres' }}
            - POSTGRES_PASSWORD=${{ github.event.inputs.POSTGRES_PASSWORD || 'postgres' }}
            - EMAIL_HOST=${{ github.event.inputs.EMAIL_HOST || 'smtp.example.com' }}
            - EMAIL_HOST_PASSWORD=${{ github.event.inputs.EMAIL_HOST_PASSWORD || '' }}
            - EMAIL_HOST_USER=${{ github.event.inputs.EMAIL_HOST_USER || '' }}
            - EMAIL_PORT=${{ github.event.inputs.EMAIL_PORT || 587 }}
            - EMAIL_USE_TLS=${{ github.event.inputs.EMAIL_USE_TLS || 'True' }}
            - TEST_URL=${{ github.event.inputs.TEST_URL || 'http://localhost:8000' }}
          secrets: |
            DJANGO_SECRET_KEY : ${{ secrets.DJANGO_SECRET_KEY }}




 
